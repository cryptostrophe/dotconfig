%YAML 1.2
---
# http://www.sublimetext.com/docs/3/syntax.html
# Generated from: https://github.com/Phidica/sublime-fish/blob/75b2294/fish.tmLanguage
name: friendly interactive shell (fish)
file_extensions:
  - fish
first_line_match: '^#!.*\b(fish)|^#\s*-\*-[^*]*mode:\s*shell-script[^*]*-\*-'
scope: source.shell.fish
contexts:
  main:
    - include: comment-external
    - include: line-continuation
    - match: \)|end
      comment: In an ideal world,
      push:
        - meta_scope: invalid.illegal.function-call.fish
        - match: '(?=[\s;&)|<>])'
          pop: true
    - match: \&
      comment: The first character of a pipeline can't be an '&', and the base pipeline scope won't be able to mark it as invalid so we have to do so here
      scope: invalid.illegal.function-call.fish
    - match: (?=\S)
      comment: Anonymous scope - Base scope pipeline, goes up until a definitive end (typical control operators) or the sequences that could be an end if we're actually inside a $self scope right now (')' and "end")
      push:
        - match: '(\n)|([;&])|(?=\)|end)'
          captures:
            1: meta.function-call.operator.fish
            2: meta.function-call.operator.fish keyword.operator.control.fish
          pop: true
        - include: pipeline
  argument:
    - match: '(?![\s;&)|<>^])'
      comment: End arg if it precedes whitespace or operators (excluding stderr redirect '^' due to a fish quirk)
      push:
        - match: '(?=[\s;&)|<>])'
          pop: true
        - match: \%
          comment: Process expansion only occurs if the '%' is at the front of the argument, and continues for the entire argument
          captures:
            0: meta.string.unquoted.fish punctuation.definition.process.fish
          push:
            - meta_scope: meta.function-call.fish meta.parameter.argument.process-expansion.fish
            - match: '(?=[\s;&)|<>])'
              pop: true
            - match: '(?:self|last)(?=$|[\s;&)|<>])'
              comment: Match special process names. By a convention that I'm making up, scope them as a type of variable
              scope: meta.string.unquoted.fish variable.language.fish
            - include: parameter-patterns
        - match: '(?:[+-]?)(?:[0-9]+\.?[0-9]*|[0-9]*\.?[0-9]+)(?=$|[\s;&)|<>])'
          comment: Treat a sequence of integers (with possible sign and decimal separator) as a standalone constant. Do this separate to the
          scope: meta.function-call.fish meta.parameter.argument.numeric.fish meta.string.unquoted.fish constant.numeric.fish
        - match: '(?![\s($])'
          comment: This scope can be used by plugins to locate arguments which don't *start* with command substitution or variable expansion and may directly resolve to file paths. Of course, they could have command substitution or variable expansion further on in them, but looking ahead for that too is nontrivial
          push:
            - meta_scope: meta.function-call.fish meta.parameter.argument.path.fish
            - match: '(?=[\s;&)|<>])'
              pop: true
            - match: \~
              comment: Home directory expansion only occurs if the '~' is at the front of the argument, so check it first
              scope: meta.string.unquoted.fish keyword.operator.tilde.fish
            - include: parameter-patterns
        - match: (?!\s)
          comment: Use standard parameter patterns for whatever doesn't match the above
          push:
            - meta_scope: meta.function-call.fish meta.parameter.argument.fish
            - match: '(?=[\s;&)|<>])'
              pop: true
            - include: parameter-patterns
  command-call-meta:
    - match: |-
        (?x)
        (builtin|command|exec)\b
        (?# Look ahead for control operations after whitespace)
        (?!\s*
          (?:
            (?# Find options)
            -
          |
            (?# Find simple control operations)
            [\n;&)|]
          |
            (?# Find redirection, which may be into a pipe but we don't care)
            (?:[0-9]+)?(?:<|>>?)|\^\^?
          )
        )
      comment: These meta commands force the parameter to behave as a standard command. They stop when their subcommand is piped. Notably, if the command is followed by redirection, then the redirection is legal and the command just prints its help text, so in that case we avoid opening this scope such that the command is caught elsewhere as a standard command
      captures:
        1: meta.function-call.fish support.function.fish meta.string.unquoted.fish
      push:
        - match: |-
            (?x)
            (?# Look ahead for control operations after whitespace)
            (?=\s*
              (?:
                (?# Find simple control operations)
                [\n;&)]
              |
                (?# Find piping)
                (?:(?:[0-9]+)?(?:<|>>?)|\^\^?)?\|
              )
            )
          pop: true
        - include: separator-whitespace
        - include: line-continuation
        - include: command-call-standard
    - match: '(?=(not)\b(?!\s*[\n;)-]))'
      comment: If the command is followed by redirection, then the redirection is illegal so we have to open the scope and let it be caught by
      push:
        - match: '(?=[\n;&)])'
          pop: true
        - match: '(not)\b(?!\s*[\n;)-])'
          comment: If the command is followed by an "&", then that's invalid
          captures:
            1: meta.function-call.fish keyword.operator.word.fish meta.string.unquoted.fish
          push:
            - match: '(?![^\n\S]|\&|\\\n)'
              pop: true
            - include: separator-whitespace
            - match: \&
              scope: invalid.illegal.function-call.fish
            - include: line-continuation
        - include: pipeline
  command-call-standard:
    - match: (?=\S)
      comment: Anonymous scope - A complete command comprising a name element and optional parameter, redirection, and comment elements
      push:
        - match: |-
            (?x)
            (?# Look ahead for operators)
            (?=
              (?:
                (?# Find a control operator)
                [\n;&)]
              |
                (?# Find a pipe operator)
                (?:(?:[0-9]+)?(?:<|>>?)|\^\^?)?\|
              )
            )
          pop: true
        - match: '(?![\s<>^%])'
          comment: Anonymous scope - A name or block element. If a block is found, everything up to the `end` command is captured here. Note that redirection and process expansion can't start the element
          push:
            - match: '(?=[\s;&)|<>])'
              pop: true
            - include: command-call-standard-block
            - match: '\[(?=[\s<>]|\\\n)'
              comment: "Look for the alternate form of test, which uses a matching pair of '[' ']'"
              captures:
                0: meta.function-call.fish support.function.test.begin.fish
              push:
                - match: '(\])|(\n|[;&)|].*)'
                  captures:
                    1: meta.function-call.fish support.function.test.end.fish
                    2: invalid.illegal.function-call.fish
                  pop: true
                - include: separator-whitespace
                - include: line-continuation
                - include: parameter
                - include: redirection
            - match: '(?:break|continue|return)(?=[\s;&)|<>])'
              comment: Look for loop/function control commands. We perform no checking on the validity of their scope (because only allowing them in the correct scope won't work if they are used within if-blocks) or parameters (because fish does that during execution not parsing)
              captures:
                0: meta.function-call.fish keyword.control.conditional.fish meta.string.unquoted.fish
            - match: (?!\s)
              comment: Anonymous scope - A generic name element
              push:
                - match: '(?=[\s;&)|<>])'
                  pop: true
                - match: (?=\()
                  comment: fish would match the whole command name invalid if there was a command substitution anywhere in it, but we can't look ahead that effectively
                  push:
                    - meta_scope: invalid.illegal.function-call.fish
                    - match: '(?=[\s;&)|<>])'
                      pop: true
                    - match: \(
                      push:
                        - match: '\)|(?=[\n;&)|<>])'
                          pop: true
                - match: (?!\s)
                  comment: Otherwise, treat the element as a fraction of a name made of arbitrary strings (which breaks at an escaped newline)
                  push:
                    - meta_scope: meta.function-call.fish variable.function.fish
                    - match: '(?=[\s;&()|<>])'
                      pop: true
                    - match: \$
                      comment: The string scope explicitly forbids '$' so that the argument rule can pick it up as a variable expansion, but '$' is treated as a literal in command names, so we have to match it separately
                      scope: meta.string.unquoted.fish
                    - include: string
        - match: \%
          comment: A command name can't begin with a process expansion operator (however the variable expansion operator '$' is allowed)
          push:
            - meta_scope: meta.function-call.fish invalid.illegal.function-call.fish
            - match: '(?=[\s;&)|<>])'
              pop: true
            - include: string
        - include: redirection
        - match: '(?=[^\n\S]+)'
          comment: Match any whitespace characters that aren't the newline
          push:
            - match: |-
                (?x)
                (?# Look ahead for operators)
                (?=
                  (?:
                    (?# Find a control operator)
                    [\n;&)]
                  |
                    (?# Find a pipe operator)
                    (?:(?:[0-9]+)?(?:<|>>?)|\^\^?)?\|
                  )
                )
              pop: true
            - match: '(?!--[\s;&)|<>])'
              comment: A list of elements that does not start with an end-of-options parameter
              push:
                - match: |-
                    (?x)
                    (?# Look ahead for operators or the end of options)
                    (?=
                      (?:
                        (?# Find a control operator)
                        [\n;&)]
                      |
                        (?# Find a pipe operator)
                        (?:(?:[0-9]+)?(?:<|>>?)|\^\^?)?\|
                      |
                        (?# Find a double hyphen)
                        --[\s;&)|<>]
                      )
                    )
                  pop: true
                - include: separator-whitespace
                - include: line-continuation
                - include: comment-internal-end
                - include: redirection
                - include: parameter
            - match: '(?=--[\s;&)|<>])'
              comment: A list of elements that starts with an end-of-options parameter
              push:
                - match: |-
                    (?x)
                    (?# Look ahead for operators)
                    (?=
                      (?:
                        (?# Find a control operator)
                        [\n;&)]
                      |
                        (?# Find a pipe operator)
                        (?:(?:[0-9]+)?(?:<|>>?)|\^\^?)?\|
                      )
                    )
                  pop: true
                - match: '(?=--[\s;&)|<>])'
                  comment: Contain just the end-of-options parameter and give it the normal scope
                  push:
                    - match: '(?=[\s;&)|<>])'
                      pop: true
                    - include: parameter
                - match: (?=\s)
                  comment: A list of elements (now forcibly using arguments)
                  push:
                    - match: |-
                        (?x)
                        (?# Look ahead for operators)
                        (?=
                          (?:
                            (?# Find a control operator)
                            [\n;&)]
                          |
                            (?# Find a pipe operator)
                            (?:(?:[0-9]+)?(?:<|>>?)|\^\^?)?\|
                          )
                        )
                      pop: true
                    - include: separator-whitespace
                    - include: line-continuation
                    - include: comment-internal-end
                    - include: redirection
                    - include: argument
  command-call-standard-block:
    - match: '(begin|while|if|for|switch|function)\s*([&|<>])'
      comment: Block commands cannot be backgrounded, piped, or redirected
      captures:
        1: meta.function-call.fish variable.function.fish meta.string.unquoted.fish
        2: invalid.illegal.operator.fish
    - match: (begin)\s*(\))
      comment: The begin command uniquely cannot be the last command in a command substitution
      captures:
        1: meta.function-call.fish variable.function.fish meta.string.unquoted.fish
        2: invalid.illegal.operator.fish
    - match: 'begin(?=\s*$|\s*[\n;]|\s+[^\s-])'
      comment: The begin command can be alone on a line or followed by any command that doesn't start with a '-'. If a '-' is seen it shouldn't be treated as a block
      captures:
        0: meta.function-call.fish keyword.control.conditional.fish meta.string.unquoted.fish
      push:
        - meta_scope: meta.block.begin.fish
        - match: 'end(?=$|[\s;&)|<>])'
          captures:
            0: meta.function-call.fish keyword.control.conditional.fish meta.string.unquoted.fish
          pop: true
        - include: main
    - match: '(?=while\s+[^\s;)-])'
      comment: If the command name is followed by a valid string (not anything that closes the scope or a string starting with a '-') then open the scope
      push:
        - meta_scope: meta.block.while.fish
        - match: 'end(?=$|[\s;&)|<>])'
          captures:
            0: meta.function-call.fish keyword.control.conditional.fish meta.string.unquoted.fish
          pop: true
        - match: while
          comment: Anonymous scope - Capture the command name we know is there, include a single instance of a pipeline, and end when an operator is seen
          captures:
            0: meta.function-call.fish keyword.control.conditional.fish meta.string.unquoted.fish
          push:
            - match: '(?=[\n;&)])'
              pop: true
            - include: line-continuation
            - include: pipeline
        - match: '(\n)|(;)|([&)])'
          comment: Todo - Let the $self scope handle invalid operators
          captures:
            1: meta.function-call.operator.fish
            2: meta.function-call.operator.fish keyword.operator.control.fish
            3: invalid.illegal.operator.fish
          push:
            - match: '(?=end(?:$|[\s;&)|<>]))'
              pop: true
            - include: main
    - match: '(?=if\s+[^\s;)-])'
      comment: If the command name is followed by a valid string (not anything that closes the scope or a string starting with a '-') then open the scope
      push:
        - meta_scope: meta.block.if.fish
        - match: 'end(?=$|[\s;&)|<>])'
          captures:
            0: meta.function-call.fish keyword.control.conditional.fish meta.string.unquoted.fish
          pop: true
        - include: command-call-standard-block-if-internal
    - match: '(?=for\s+[^\s;)-])'
      comment: If the command name is followed by a valid string (not anything that closes the scope or a string starting with a '-') then open the scope
      push:
        - meta_scope: meta.block.for-in.fish
        - match: 'end(?=$|[\s;&)|<>])'
          captures:
            0: meta.function-call.fish keyword.control.conditional.fish meta.string.unquoted.fish
          pop: true
        - match: (for)(\s+)
          comment: Anonymous scope - Capture the command name we know is there, include a single instance of a parameter (the varname), and end when the whitespace after the varname is captured
          captures:
            1: meta.function-call.fish keyword.control.conditional.fish meta.string.unquoted.fish
            2: meta.function-call.fish
          push:
            - match: \s+
              captures:
                0: meta.function-call.fish
              pop: true
            - include: line-continuation
            - include: parameter
            - match: \S+
              comment: Capture anything that a parameter explicitly rejects, which is mostly operators
              scope: invalid.illegal.operator.fish
        - include: line-continuation
        - match: in(?=\s)
          comment: Anonymous scope - Capture the command name which might be there, include an arbitrary number of arguments, and end when the control operator is seen
          captures:
            0: meta.function-call.fish keyword.control.conditional.fish meta.string.unquoted.fish
          push:
            - match: '(?=[\n;&)])'
              pop: true
            - include: separator-whitespace
            - include: line-continuation
            - include: comment-internal-end
            - include: argument
        - match: '(\n)|(;)|([&)])'
          comment: Todo - Let the $self scope handle invalid operators
          captures:
            1: meta.function-call.operator.fish
            2: meta.function-call.operator.fish keyword.operator.control.fish
            3: invalid.illegal.operator.fish
          push:
            - match: '(?=end(?:$|[\s;&)|<>]))'
              pop: true
            - include: main
        - match: '\S+?(?=[\s;&)])'
          comment: Anything beside line continuation, "in", or a control operator is invalid
          scope: invalid.illegal.function-call.fish
        - include: separator-whitespace
    - match: '(?=switch\s+[^\s;)-])'
      comment: If the command name is followed by a valid string (not anything that closes the scope or a string starting with a '-') then open the scope
      push:
        - meta_scope: meta.block.switch.fish
        - match: 'end(?=$|[\s;&)|<>])'
          captures:
            0: meta.function-call.fish keyword.control.conditional.fish meta.string.unquoted.fish
          pop: true
        - match: (?=switch)
          comment: Anonymous scope - Match the valid part of the switch statement, then look for an invalid part
          push:
            - match: '(?=[\n;&)])'
              pop: true
            - match: (switch)(\s+)
              comment: Anonymous scope - Capture the command name we know is there, include a single instance of a parameter (the value), and end when whitespace or a control operator is seen
              captures:
                1: meta.function-call.fish keyword.control.conditional.fish meta.string.unquoted.fish
                2: meta.function-call.fish
              push:
                - match: '(?=[\s;&)])'
                  pop: true
                - include: line-continuation
                - include: parameter
                - match: \S+
                  comment: Capture anything that a parameter explicitly rejects, which is mostly operators
                  scope: invalid.illegal.operator.fish
            - match: \s+
              comment: Anonymous scope - Capture whitespace which might be there, match any non-control-operator strings as invalid, and end when a control operator is seen
              captures:
                0: meta.function-call.fish
              push:
                - match: '(?=[\n;&)])'
                  pop: true
                - match: '\S+?(?=[\s;&)])'
                  scope: invalid.illegal.string.fish
        - match: '(\n)|(;)|([&)])'
          comment: Todo - Let the $self scope handle invalid operators
          captures:
            1: meta.function-call.operator.fish
            2: meta.function-call.operator.fish keyword.operator.control.fish
            3: invalid.illegal.operator.fish
          push:
            - match: '(?=end(?:$|[\s;&)|<>]))'
              pop: true
            - match: 'case(?=[\s;&)])'
              comment: Todo - Double check this catches pipes, redirection into pipe, all that
              captures:
                0: meta.function-call.fish keyword.control.conditional.fish meta.string.unquoted.fish
              push:
                - match: '(\n)|(;)|([&)])'
                  captures:
                    1: meta.function-call.operator.fish
                    2: meta.function-call.operator.fish keyword.operator.control.fish
                    3: invalid.illegal.operator.fish
                  pop: true
                - include: separator-whitespace
                - include: line-continuation
                - include: comment-internal-end
                - include: argument
                - match: '\S+?(?=[\s;&)])'
                  comment: Anything else (eg, redirection) is illegal
                  scope: invalid.illegal.operator.fish
            - include: main
    - match: '(?=function\s+[^\s;)-])'
      comment: If the command name is followed by a valid string (not anything that closes the scope or a string starting with a '-') then open the scope
      push:
        - meta_scope: meta.block.function.fish
        - match: 'end(?=$|[\s;&)|<>])'
          captures:
            0: meta.function-call.fish keyword.control.conditional.fish meta.string.unquoted.fish
          pop: true
        - match: (?=function)
          comment: Anonymous scope - Match the defined name of the function statement, then look for further parameters
          push:
            - match: |-
                (?x)
                (?# Look ahead for operators)
                (?=
                  (?:
                    (?# Find a control operator)
                    [\n;&)]
                  |
                    (?# Find a redirect or pipe operator)
                    (?:(?:[0-9]+)?(?:<|>>?)|\^\^?)\|?
                  )
                )
              pop: true
            - match: (function)\s+
              comment: Anonymous scope - Capture the command name we know is there, include a single instance of a parameter (the value), and end when whitespace or a control operator is seen
              captures:
                0: meta.function-call.fish
                1: keyword.control.conditional.fish meta.string.unquoted.fish
              push:
                - match: '(?=[\s;&)|<>])'
                  pop: true
                - include: line-continuation
                - match: "[|<>]"
                  push:
                    - meta_scope: invalid.illegal.string.fish
                    - match: '(?=[\s;&)])'
                      pop: true
                - match: (?!\\\n)
                  comment: Anonymous scope - Start when an escaped newline isn't present, and end when whitespace or an operator is seen
                  push:
                    - match: '(?=[\s;&|<>])'
                      pop: true
                    - match: '(?![\s)])'
                      comment: This is all the usual things a parameter is allowed to contain
                      push:
                        - meta_scope: meta.function-call.fish meta.parameter.argument.fish entity.name.function.fish
                        - match: '(?=[\s;&)|<>])'
                          pop: true
                        - include: parameter-patterns
                    - match: \)
                      comment: fish sees a closing parenthesis as mismatched, since command substitution is allowed
                      scope: invalid.illegal.string.fish
            - match: '(?=[^\n\S])'
              comment: Anonymous scope - Capture whitespace which might be there, then match anything normal for a command call, except redirections!
              push:
                - match: |-
                    (?x)
                    (?# Look ahead for operators)
                    (?=
                      (?:
                        (?# Find a control operator)
                        [\n;&)]
                      |
                        (?# Find a redirect or pipe operator)
                        (?:(?:[0-9]+)?(?:<|>>?)|\^\^?)\|?
                      )
                    )
                  pop: true
                - include: separator-whitespace
                - include: line-continuation
                - include: comment-internal-end
                - include: parameter
        - match: '(\n)|(;)|(?=[&)|]|(?:[0-9]+)?(?:<|>>?)|\^\^?)'
          comment: Anonymous scope - Capture the operator we know is there, include the base scope, and end when an `end` command is seen
          captures:
            1: meta.function-call.operator.fish
            2: meta.function-call.operator.fish keyword.operator.control.fish
          push:
            - match: '(?=end(?:$|[\s;&)|<>]))'
              pop: true
            - include: main
  command-call-standard-block-if-internal:
    - match: '(?=if(?:\s*\n|\s+[^\s;]))'
      comment: Anonymous scope - Capture an `if` and the command up to the control operator, then capture from the control operator indefinitely
      push:
        - match: '(?=end(?:$|[\s;&)|<>]))'
          pop: true
        - match: if
          comment: Anonymous scope - Match the command name we know is there, include a single instance of a pipeline, and end when a control operator is seen
          captures:
            0: meta.function-call.fish keyword.control.conditional.fish meta.string.unquoted.fish
          push:
            - match: '(?=[\n;&])'
              pop: true
            - include: line-continuation
            - include: pipeline
        - match: (\n)|(;)|(&)
          comment: Anonymous scope - Match the operator we know is there, then include the base scope or an `else` structure
          captures:
            1: meta.function-call.operator.fish
            2: meta.function-call.operator.fish keyword.operator.control.fish
            3: invalid.illegal.operator.fish
          push:
            - match: '(?=end(?:$|[\s;&)|<>]))'
              pop: true
            - match: '(?=else\s*[\s;])'
              comment: Anonymous scope - Capture an `else` up to the control operator or the start of an `if` structure, then match from the control operator indefinitely or match an `if` structure
              push:
                - match: '(?=end(?:$|[\s;&)|<>]))'
                  pop: true
                - match: 'else(?=\s*[\s;])'
                  comment: Anonymous scope - Match the `else` we know is there and any comment, and mark anything besides an `if` as illegal
                  captures:
                    0: meta.function-call.fish keyword.control.conditional.fish meta.string.unquoted.fish
                  push:
                    - match: '(?=[\n;&]|if(?:\s*\n|\s+[^\s;]))'
                      pop: true
                    - include: separator-whitespace
                    - include: line-continuation
                    - include: comment-internal-end
                    - match: '\S+?(?=[\s;&])'
                      comment: Anything else is illegal
                      scope: invalid.illegal.string.fish
                - match: (\n)|(;)|(&)
                  comment: Anonymous scope - Match the operator which will be there if no `if` was seen, then include the base scope which marks further `else` commands as invalid
                  captures:
                    1: meta.function-call.operator.fish
                    2: meta.function-call.operator.fish keyword.operator.control.fish
                    3: invalid.illegal.operator.fish
                  push:
                    - match: '(?=end(?:$|[\s;&)|<>]))'
                      pop: true
                    - include: main
                - include: command-call-standard-block-if-internal
            - include: main
  command-substitution:
    - match: (?=\()
      comment: 'Capture "(...)" or "(...)[...]"'
      push:
        - match: '(?![\(\[])'
          pop: true
        - match: \(
          captures:
            0: punctuation.section.parens.begin.fish
          push:
            - meta_scope: meta.parens.command-substitution.fish
            - match: \)
              captures:
                0: punctuation.section.parens.end.fish
              pop: true
            - include: main
        - include: index-expansion
  comment-external:
    - match: '\#'
      comment: A full or inline comment outside of any command call
      captures:
        0: punctuation.definition.comment.fish
      push:
        - meta_scope: comment.line.external.fish
        - match: \n
          pop: true
  comment-internal-end:
    - match: '\#'
      comment: An inline comment at the end of a command call. Does not consume the newline, thus allowing the command call to capture it and end
      captures:
        0: punctuation.definition.comment.fish
      push:
        - meta_scope: comment.line.internal.end.fish
        - match: (?=\n)
          pop: true
  index-expansion:
    - match: '\['
      comment: In other words, the anonymous scope which contains the variable and the index expansion parameter list should only be allowed to contain a single copy of each of those two things. We cannot enforce that without a scope stack. Our workaround is to allow an infinite number of these and hope the user can keep track of when there are too many
      captures:
        0: punctuation.section.brackets.begin.fish
      push:
        - meta_scope: meta.brackets.index-expansion.fish
        - match: '\]'
          captures:
            0: punctuation.section.brackets.end.fish
          pop: true
        - match: \.\.
          scope: keyword.operator.range.fish
        - include: command-substitution
        - include: variable-expansion
        - include: string-quoted
        - match: '(?:[+-]?[0-9]+)(?=[\s;&)|<>]|\]|\.\.)'
          comment: There's no need to apply meta.string.unquoted to anything inside of an index expansion, as if it needs to be applied then it would have been handled already. The fact index expansion can appear inside of quotes (after a variable expansion) makes it tricky to decide what is or isn't "unquoted"
          scope: constant.numeric.fish
        - match: \S
          comment: Anything else is invalid
          scope: invalid.illegal.index.fish
  line-continuation:
    - match: (?=\\\n)
      comment: End when an unescaped newline is seen, the first character of a line isn't whitespace or a comment character or the escaped newline itself, or if the next character after some consumed whitespace isn't more whitespace or a comment character
      push:
        - match: '(?=\n)|^(?![\s\#\\])|\s(?![\s\#])'
          pop: true
        - match: \\\n
          scope: constant.character.escape
        - match: '\#'
          captures:
            0: punctuation.definition.comment.fish
          push:
            - meta_scope: comment.line.continuation.fish
            - match: \n
              pop: true
  parameter:
    - match: '(?![\s;&)|<>^])'
      comment: See the argument rule for more general information on parameters
      push:
        - match: '(?=[\s;&)|<>])'
          pop: true
        - match: '(?:--)(?=[\s;&)|<>])'
          comment: End of options (parameter of just two hyphens)
          scope: meta.function-call.fish meta.parameter.option.end.fish variable.parameter.fish punctuation.definition.option.end.fish meta.string.unquoted.fish
        - match: (?=--)
          comment: Long option (parameter starting with two hyphens)
          push:
            - meta_scope: meta.function-call.fish meta.parameter.option.long.fish
            - match: '(?=[\s;&)|<>])'
              pop: true
            - match: (?:--)
              captures:
                0: punctuation.definition.option.long.begin.fish meta.string.unquoted.fish
              push:
                - meta_scope: variable.parameter.fish
                - match: '(?=[\s;&)|<>]|=)'
                  pop: true
                - include: command-substitution
                - match: (?=\$)
                  push:
                    - meta_scope: meta.string.unquoted.fish
                    - match: (?!\$)
                      pop: true
                    - include: variable-expansion
                - include: string-quoted
                - match: '(?![''"])'
                  push:
                    - meta_scope: meta.string.unquoted.fish
                    - match: '(?=[\s;&()|<>''"$]|\=)'
                      pop: true
                    - include: string-unquoted-patterns
            - match: (?:=)
              comment: Consume the '=' and then use standard parameter patterns as well as numerics
              captures:
                0: variable.parameter.fish punctuation.definition.option.long.separator.fish meta.string.unquoted.fish
              push:
                - match: '(?=[\s;&)|<>])'
                  pop: true
                - match: '(?:[+-]?)(?:[0-9]+\.?[0-9]*|[0-9]*\.?[0-9]+)(?=$|[\s;&)|<>])'
                  scope: meta.string.unquoted.fish constant.numeric.fish
                - include: parameter-patterns
        - match: '(?:-)(?=[^\s;&)|<>])'
          comment: Short option (parameter starting with one hyphen)
          captures:
            0: punctuation.definition.option.short.fish meta.string.unquoted.fish
          push:
            - meta_scope: meta.function-call.fish meta.parameter.option.short.fish variable.parameter.fish
            - match: '(?=[\s;&)|<>])'
              pop: true
            - include: parameter-patterns
        - include: argument
  parameter-patterns:
    - include: command-substitution
    - match: (?=\$)
      comment: Give variable expansion the unquoted string scope, since if it appears inside a string it gets the quoted string scope and we should mirror that
      push:
        - meta_scope: meta.string.unquoted.fish
        - match: (?!\$)
          pop: true
        - include: variable-expansion
    - include: string
  pipeline:
    - match: '(?=(and|or)\b(?!\s*[\n;)-]))'
      comment: If the command is followed by redirection, then the redirection is illegal so we have to open the scope and let it be caught by
      push:
        - match: '(?=[\n;&)])'
          pop: true
        - match: '(and|or)\b(?!\s*[\n;)-])'
          comment: If the command is followed by an "&", then that's invalid
          captures:
            1: meta.function-call.fish keyword.operator.word.fish meta.string.unquoted.fish
          push:
            - match: '(?![^\n\S]|\&|\\\n)'
              pop: true
            - include: separator-whitespace
            - match: \&
              scope: invalid.illegal.function-call.fish
            - include: line-continuation
        - include: pipeline
    - include: pipeline-segment
  pipeline-segment:
    - match: '(?=[&|]|(?:[0-9]+)?(?:<|>>?)|\^\^?)'
      comment: Match operators (background, pipe, and redirect) which cannot start a pipeline because they must be consumed within or after a pipeline
      push:
        - match: |-
            (?x)
            (?# Look ahead to ensure no more operators after whitespace)
            (?=\n)
            |
            (?!
              \s*
              (?:
                (?# Find a control operator)
                [\n;&)|]
              |
                (?# Find a pipe operator)
                (?:[0-9]+)?(?:<|>>?)|\^\^?
              )
            )
          pop: true
        - match: '(?:[&|]|(?:[0-9]+)?(?:<|>>?)|\^\^?)'
          scope: invalid.illegal.function-call.fish
    - match: '(?:case|else|end)(?=[\s;&)|<>])'
      comment: Match a command which is illegal in the base scope
      scope: invalid.illegal.function-call.fish
    - match: '(?=[^\s#])'
      comment: Anonymous scope - A pipeline which may be one command call or multiple command calls linked by pipe operators ('|', '2>|', etc). The pipeline terminates at the first encounter of any control operator
      push:
        - match: '(?=[\n;&)])'
          pop: true
        - match: |-
            (?x)
            (?# Negative lookahead for whitespace, comments, piping)
            (?!
              \s|\#|(?:(?:[0-9]+)?(?:<|>>?)|\^\^?)?\|
            )
          comment: Anonymous scope - Match the command of a pipeline segment
          push:
            - match: |-
                (?x)
                (?# Look ahead for operators after whitespace)
                (?=\s*
                  (?:
                    (?# Find a control operator)
                    [\n;&)]
                  |
                    (?# Find a pipe operator)
                    (?:(?:[0-9]+)?(?:<|>>?)|\^\^?)?\|
                  )
                )
              pop: true
            - include: command-call-meta
            - include: command-call-standard
        - match: |-
            (?x)
            (?# Look ahead for piping)
            (?=
              (?:(?:[0-9]+)?(?:<|>>?)|\^\^?)?\|
            )
          comment: Anonymous scope - Match piping which may lead to a second command, and if it does recurse into
          push:
            - match: '(?=\s*[\n;&)])'
              pop: true
            - match: |-
                (?x)
                (?# Look ahead for piping followed by either control operators or redirection)
                (?=
                  (?:(?:[0-9]+)?(?:<|>>?)|\^\^?)?\|
                  \s*
                  (?:
                    $
                  |
                    [\n;&)]
                  |
                    (?:(?:[0-9]+)?(?:<|>>?)|\^\^?)
                  )
                )
              comment: Match a pipe not followed by a command, hence a malformed segment of the pipeline. However, we make an exception for the case where a pipe is followed by another pipe, and match it further down
              push:
                - match: '(?=\s*$|\s*[\n;&)])'
                  pop: true
                - match: '(?:(?:[0-9]+)?(?:<|>>?)|\^\^?)?\|(?=\s*$|\s*[\n)])'
                  comment: If the pipeline would end implicitly (ie, with a newline or close parenthesis), then mark the pipe itself invalid
                  scope: meta.function-call.fish invalid.illegal.operator.fish
                - match: |-
                    (?x)
                    (?# Consume valid piping; captures 1 2 3 4)
                    (?:([0-9]+)?(<|>>?)|(\^\^?))?(\|)
                    (?# Consume whitespace)
                    \s*
                    (?# Consume remainder; capture 5)
                    (.*)
                  comment: If the pipeline would end with an explicit operator or encounter anything that we determined was invalid above, then mark the first set of piping as valid and everything beyond as invalid
                  scope: meta.function-call.fish
                  captures:
                    1: meta.pipe.fish constant.numeric.file-descriptor.fish
                    2: meta.pipe.fish keyword.operator.pipe.redirect.fish
                    3: meta.pipe.fish keyword.operator.pipe.redirect.fish
                    4: meta.pipe.fish keyword.operator.pipe.fish
                    5: invalid.illegal.function-call.fish
            - match: '(?:([0-9]+)?(<|>>?)|(\^\^?))?(\|)((?:\s*\|)+)?'
              comment: Pick up extra pipes after the first and mark them invalid, but in fish 3 it's valid syntax so don't get greedy with the highlighting
              scope: meta.function-call.fish meta.pipe.fish
              captures:
                1: constant.numeric.file-descriptor.fish
                2: keyword.operator.pipe.redirect.fish
                3: keyword.operator.pipe.redirect.fish
                4: keyword.operator.pipe.fish
                5: invalid.illegal.function-call.fish
            - match: '\#'
              comment: After a pipe can't be a comment
              push:
                - meta_scope: meta.function-call.fish invalid.illegal.function-call.fish
                - match: '(?=[\n)])'
                  pop: true
            - match: '(and|or)\b(?!\s*[\n;-])'
              comment: This match should generally be pretty similar to the match which seeks a valid "and"/"or" in
              scope: meta.function-call.fish invalid.illegal.function-call.fish
            - include: separator-whitespace
            - match: (?=\\\n)
              comment: Keep the scope going over escaped newlines and comments
              push:
                - meta_scope: meta.function-call.fish
                - match: (?!\\\n)
                  pop: true
                - include: line-continuation
            - include: pipeline-segment
  redirection:
    - match: '(?=(?:[0-9]+(?:<|>>|>)|>>|\^\^|[<>^])\&)'
      comment: End at anything that would end a parameter, including redirections *if* they are *not* this same type of redirection (ie, have an '&'), in which case this scope stays open and we match the next one. The negative lookahead for <>^ at the end is to keep ST2 happy (not hanging)
      push:
        - match: '(?=[\s;&)|]|(?:[0-9]+(?:<|>>|>)|>>|\^\^|[<>^])(?![&<>^]))'
          pop: true
        - match: '(?:([0-9]+)(<|>>|>)|(>>|\^\^|[<>^]))(\&)\s*'
          comment: We have to try and catch an '&' here because if it is seen by the outer end match then it will be considered a valid operator and the redirection scope will immediately terminate
          captures:
            0: meta.function-call.fish meta.redirection.fish
            1: meta.string.unquoted.fish constant.numeric.file-descriptor.fish
            2: keyword.operator.redirect.fish
            3: keyword.operator.redirect.fish
            4: keyword.operator.redirect.dereference.fish
          push:
            - match: '(\&.*$)|(?![&\\])'
              captures:
                0: meta.function-call.fish meta.redirection.fish
                1: invalid.illegal.file-descriptor.fish
              pop: true
            - include: line-continuation
        - include: line-continuation
        - match: (?=\()
          comment: Evaluates to a string which may be an integer
          push:
            - meta_scope: meta.function-call.fish meta.redirection.fish
            - match: (?!\()
              pop: true
            - include: command-substitution
        - match: (?=\$)
          comment: Evaluates to a string which may be an integer
          push:
            - meta_scope: meta.function-call.fish meta.redirection.fish
            - match: (?!\$)
              pop: true
            - include: variable-expansion
        - match: '(?=[''"])'
          comment: May be a quoted integer, which is allowed
          push:
            - meta_scope: meta.function-call.fish meta.redirection.fish
            - match: '(?![''"])'
              pop: true
            - include: string-quoted
        - match: '(?:[0-9]+)(?=$|[\s;&)|<>])'
          scope: meta.function-call.fish meta.redirection.file-descriptor.fish meta.string.unquoted.fish constant.numeric.file-descriptor.fish
        - match: '(?:-)(?=$|[\s;&)|<>])'
          scope: meta.function-call.fish meta.redirection.file-descriptor.fish meta.string.unquoted.fish keyword.operator.redirect.close.fish
        - match: (?:\S+.*)$
          comment: Anything else is illegal
          scope: meta.function-call.fish meta.redirection.fish invalid.illegal.file-descriptor.fish
    - match: '(?=(?:[0-9]+(?:<|>>|>)|>>|\^\^|[<>^])\??)'
      comment: End at anything that would end a parameter, including redirections *if* they are *not* this same type of redirection (ie, redirection into file descriptor, or into pipe), in which case this scope stays open and we match the next one
      push:
        - match: '(?=[\s;&)|]|(?:[0-9]+(?:<|>>|>)|>>|\^\^|[<>^])[&|])'
          pop: true
        - match: '(?:([0-9]+)(<|>>|>)|(>>|\^\^|[<>^]))(\?)?\s*'
          comment: We have to try and catch bad operators here because if they are seen by the outer end match then they will be considered valid and the redirection scope will immediately terminate
          captures:
            0: meta.function-call.fish meta.redirection.fish
            1: meta.string.unquoted.fish constant.numeric.file-descriptor.fish
            2: keyword.operator.redirect.fish
            3: keyword.operator.redirect.fish
            4: keyword.operator.redirect.clobber-test.fish
          push:
            - match: "((?:[&?]|[0-9]*[<>^]).*$)|(?![&?<>^])"
              captures:
                0: meta.function-call.fish meta.redirection.fish
                1: invalid.illegal.path.fish
              pop: true
            - include: line-continuation
        - include: line-continuation
        - match: '\{|(?=\})'
          comment: A redirection path cannot contain brace expansion
          push:
            - meta_scope: meta.function-call.fish meta.redirection.fish invalid.illegal.path.fish
            - match: '[\s;&)|}]'
              pop: true
        - match: "[*?]"
          comment: A redirection path cannot contain wildcard expansion
          scope: meta.function-call.fish meta.redirection.fish invalid.illegal.path.fish
        - match: "(?:[&?]|[0-9]*[<>^]).*$"
          comment: Check for characters which are associated with redirection, so path cannot begin with them
          scope: meta.function-call.fish meta.redirection.fish invalid.illegal.path.fish
        - match: \~
          scope: meta.function-call.fish meta.redirection.path.fish meta.string.unquoted.fish keyword.operator.tilde.fish
        - match: '(?![\s;&()|<>${}*?])'
          comment: Use strings to build a file path, but break out if any invalid elements or elements that wouldn't form a literal path are encountered
          push:
            - meta_scope: meta.function-call.fish meta.redirection.path.fish
            - match: '(?=[\s;&()|<>${}*?])'
              pop: true
            - include: string-quoted
            - match: '(?![\s;&()|<>${}*?]|[''"])'
              comment: Should use the same patterns as the above begin/end, but also add the quotes so the
              push:
                - meta_scope: meta.string.unquoted.fish
                - match: '(?=[\s;&()|<>${}*?]|[''"])'
                  pop: true
                - include: string-unquoted-patterns-escapes
        - match: (?=\()
          comment: A raw path cannot begin with '(' since this undergoes command substitution
          push:
            - meta_scope: meta.function-call.fish meta.redirection.fish
            - match: (?!\()
              pop: true
            - include: command-substitution
        - match: (?=\$)
          comment: We also make sure that variable expansion is scoped as an unquoted string, since if it appears inside quotes then it gets scoped as a quoted string and we should mirror that
          push:
            - meta_scope: meta.function-call.fish meta.redirection.fish meta.string.unquoted
            - match: (?!\$)
              pop: true
            - include: variable-expansion
  separator-whitespace:
    - match: '(?:[^\n\S]+)'
      comment: Fundamental structure used to separate elements of a command call; it's any whitespace that isn't a newline, predominantly meaning spaces or tabs
      scope: meta.function-call.fish
  string:
    - include: string-quoted
    - include: string-unquoted
  string-quoted:
    - match: \'
      captures:
        0: punctuation.definition.string.begin.fish
      push:
        - meta_scope: string.quoted.single.fish
        - match: \'
          captures:
            0: punctuation.definition.string.end.fish
          pop: true
        - match: '\\[\''\\]'
          comment: Only accepted escapes are \' and \\
          scope: constant.character.escape.fish
    - match: \"
      captures:
        0: punctuation.definition.string.begin.fish
      push:
        - meta_scope: string.quoted.double.fish
        - match: \"
          captures:
            0: punctuation.definition.string.end.fish
          pop: true
        - match: '\\[\n\"\\$]'
          comment: Only accepted escapes are \<newline>, \", \\, and \$
          scope: constant.character.escape.fish
        - include: variable-expansion
  string-unquoted:
    - match: '(?![\s;&()|<>''"$])'
      comment: End unquoted string at anything that can't be in one
      push:
        - meta_scope: meta.string.unquoted.fish
        - match: '(?=[\s;&()|<>''"$])'
          pop: true
        - include: string-unquoted-patterns
  string-unquoted-patterns:
    - include: string-unquoted-patterns-escapes
    - match: '\{'
      captures:
        0: punctuation.section.braces.begin.fish
      push:
        - meta_scope: meta.braces.brace-expansion.fish
        - match: '(\})|(\n|[;&)|].*)'
          captures:
            1: punctuation.section.braces.end.fish
            2: invalid.illegal.punctuation.section.fish
          pop: true
        - match: \,
          scope: punctuation.section.braces.separator.fish
        - include: command-substitution
        - include: variable-expansion
        - match: '(?:[^\n\S]+)'
          comment: Unescaped spaces aren't allowed, as technically that separates the braces into two separate arguments. Don't consume a newline though, so the scope end capture can get it
          scope: invalid.illegal.whitespace.fish
        - include: string-quoted
        - match: '(?:[+-]?)(?:[0-9]+\.?[0-9]*|[0-9]*\.?[0-9]+)(?=$|[\s;&)|<>]|\}|\,)'
          scope: constant.numeric.fish
        - match: '(?![\s;&)|<>''"])'
          comment: "Begin/end string as before with the addition of breaking at a '}' or ','"
          push:
            - match: '(?=[\s;&)|<>''"]|\}|\,)'
              pop: true
            - match: \\\,
              scope: constant.character.escape.fish
            - include: string-unquoted-patterns
    - match: (\*\*)|(\*)|(\?)
      scope: meta.wildcard-expansion.fish
      captures:
        1: keyword.operator.double-star.fish
        2: keyword.operator.single-star.fish
        3: keyword.operator.question-mark.fish
  string-unquoted-patterns-escapes:
    - match: |-
        (?x)
        \\[abefnrtv $\\*?#(){}\[\]<>^&|;"']
        |
        \\[~%]
        |
        \\[xX][0-9A-Fa-f]{1,2}
        |
        \\[0-7]{1,3}
        |
        \\u[0-9A-Fa-f]{1,4}
        |
        \\U[0-9A-Fa-f]{1,8}
        |
        \\c[?-~]
      comment: This list follows the order given in official fish documentation. Technically '~' and '%' only need escaping if they appear at the front of a parameter. If they are escaped within a parameter, then fish does not *highlight* the escape, however it does silently *parse* the escape and the backslash is removed before the parameter is passed to the command. So, we highlight these escapes as well since they are actually treated as valid escapes by fish
      scope: constant.character.escape.fish
    - match: \\\n
      comment: Just for convenience we separate the newline escape
      scope: constant.character.escape.fish
  variable-expansion:
    - include: variable-expansion-illegal
    - match: (?=\$)
      comment: 'Capture "$foo" or "$foo[]" or "$$foo[][]" etc'
      push:
        - meta_scope: meta.variable-expansion.fish
        - match: '(?=[^\$\w\[])'
          pop: true
        - match: \$
          captures:
            0: punctuation.definition.variable.fish
          push:
            - meta_scope: variable.other.fish
            - match: '(?=[^\$\w])'
              pop: true
            - include: variable-expansion-illegal
            - include: variable-expansion-simple
        - include: index-expansion
  variable-expansion-illegal:
    - match: '\$(?:(?=[,''"\]}\s;&)|])|[^\w\$][^$,''"\]}\s;&)|]*)'
      comment: A lone '$' in a scope, or an attempt to expand a variable starting with a nonword character, is an error. These boundaries are the same as for meta.string.unquoted
      scope: invalid.illegal.variable-expansion.fish
  variable-expansion-simple:
    - match: \$
      captures:
        0: punctuation.definition.variable.fish
      push:
        - meta_scope: variable.other.fish
        - match: '(?=[^\$\w])'
          pop: true
        - include: variable-expansion-illegal
        - include: variable-expansion-simple
