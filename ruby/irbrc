# vim:ft=ruby
# If this file fails to load, debug by executing as a normal Ruby file:
#   ruby ~/.config/ruby/irbrc

require "irb"
require "irb/completion"

require "English"
require "pathname"

require "zgm/colour"

include IRB # rubocop:disable Style/MixinUsage

# -----------------------------------------------------------------------------
# http://irb.tools/
# -----------------------------------------------------------------------------

# `configure.rb` loads `implementation.rb`, which sets up the Irbtools module
# with default settings
require "irbtools/configure"

# Get just the version number
irb_v, ruby_v = [IRB.version, RUBY_DESCRIPTION].map { |s| s.split(/[ (]/)[1] }

# Format string for #format call
welcome_string = "Welcome to %<i>sIRB %<i_v>s#{irb_v}%<x>s. " \
                 "You are using %<r>sruby %<r_v>s#{ruby_v}%<x>s."

# Arguments for #format call
fancy_colours = {
  i:   Colour.green.to_s,
  i_v: Colour.brightgreen.to_s,
  r:   Colour.magenta.to_s,
  r_v: Colour.brightmagenta.to_s,
  x:   Colour.reset.to_s
}

# Override default welcome message
Irbtools.welcome_message = format(welcome_string, fancy_colours)

# Override default FancyIrb colours
Irbtools.replace_library_callback :fancy_irb do
  FancyIrb.start(
    rocket_mode:      true,   # activate or deactivate #=> rocket
    rocket_prompt:    "#=> ", # prompt to use for the rocket
    result_prompt:    "=> ",  # prompt to use for normal output
    east_asian_width: false,  # set to true if you have double-width characters (slower)
    colorize:         {       # colors hash. Set to nil to deactivate colors
      rocket_prompt: %i[blue],
      result_prompt: %i[blue],
      input_prompt:  nil,
      irb_errors:    nil,
      stderr:        %i[red bright],
      stdout:        nil,
      input:         nil
    }
  )
end

# Custom Wirb colour scheme
Irbtools.replace_library_callback "wirb/wp" do
  irbrc_dir = Pathname.new(__dir__).expand_path.realpath
  Wirb.start
  Wirb.load_schema "#{irbrc_dir}/zgm.wirb.yaml"
end

# Now we load the rest of it
require "irbtools"

# -----------------------------------------------------------------------------
# settings
# -----------------------------------------------------------------------------

# General IRB settings

IRB.conf[:AUTO_INDENT]  = true

IRB.conf[:USE_READLINE] = true

IRB.conf[:HISTORY_FILE] = File.expand_path("~/.local/history/irb_history")
IRB.conf[:EVAL_HISTORY] = 2**10
IRB.conf[:SAVE_HISTORY] = 2**15

# -----------------------------------------------------------------------------
# prompt
# -----------------------------------------------------------------------------

off = Colour.reset.to_s
dim = Colour.brightblack.to_s

IRB.conf[:PROMPT][:ZGM] = {
  # normal prompt
  PROMPT_I: "#{Colour.blue}>>#{off} ",

  # prompt when indenting code
  PROMPT_N: "#{dim}‚îÇ#{off}  ",

  # prompt for continuing strings
  PROMPT_S: "#{dim}‚îÇ%l#{off} ",

  # prompt for continuing statement
  PROMPT_C: "#{dim}‚îú#{off} ",

  # prefix to statement output
  RETURN:   "#{Colour.brightwhite}=>#{off} %s\n"
}

IRB.conf[:PROMPT_MODE] = :ZGM

# -----------------------------------------------------------------------------
# helper methods
# -----------------------------------------------------------------------------

# Excludes instance methods common to all Ruby {Object}s üêµ
# @return [Array<Symbol>]
class Object
  def my_methods
    (methods - Object.instance_methods).sort
  end
end

# Create misc. objects for testing
module Sample
  extend self

  # @return [String]
  def string
    "H√´llo, w√≥rld!\n"
  end
  alias str string

  # @return [Integer]
  alias original_hash hash

  # @return [Hash]
  def hash
    {
      red:    "ruby",
      green:  "emerald",
      blue:   "sapphire",
      violet: "amethyst",
      white:  %w[diamond glass]
    }
  end
  alias hsh hash

  # @return [Array<String>]
  def array
    hsh.values.flatten
  end
  alias ary array

  # @return [Integer]
  def integer
    rand(10..1000)
  end
  alias int integer

  # @return [Float]
  def float
    rand(10.0..100.0)
  end

  # @return [Regexp]
  def regex
    /\A\h+\z/i
  end
  alias regexp regex

  # @return [Set]
  def set
    require "set"
    Set.new(arr.map(&:to_sym))
  end

  # @return [URI]
  def uri
    require "uri"
    URI("https://user:p4s$w0rd@example.org:8000/path/to/resource.cgi?param=value#anchor")
  end
  alias url uri
end
